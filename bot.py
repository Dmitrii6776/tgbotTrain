import os
import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ConversationHandler, ContextTypes
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime
import json
from oauth2client.service_account import ServiceAccountCredentials

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
ASK_NAME, ASK_AGE, ASK_GOAL = range(3)

# –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π Telegram User ID
ADMIN_CHAT_ID = int(os.getenv('ADMIN_CHAT_ID'))  # ‚Üê —Å—é–¥–∞ –≤—Å—Ç–∞–≤—å —Å–≤–æ–π ID

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –≤ Google Sheets
def write_to_google_sheet(full_name, age, goal):
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    credentials_json = os.getenv('tgbot-458217-f3c934000e84.json')
    credentials_dict = json.loads(credentials_json)
    creds = ServiceAccountCredentials.from_json_keyfile_dict(credentials_dict, scope)

client = gspread.authorize(creds)
    
    sheet = client.open('–ó–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏').sheet1
    now = datetime.now().strftime("%d.%m.%Y %H:%M")
    data = [now, full_name, age, goal]
    sheet.append_row(data)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton('–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å')]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏—Ç–µ "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.', reply_markup=reply_markup)

# –ù–∞–∂–∞–ª –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å
async def booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –§–ò–û:')
    return ASK_NAME

# –ü–æ–ª—É—á–∞–µ–º –§–ò–û
async def ask_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['full_name'] = update.message.text
    await update.message.reply_text('–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:')
    return ASK_AGE

# –ü–æ–ª—É—á–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç
async def ask_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['age'] = update.message.text
    
    # –í—ã–≤–æ–¥–∏–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ü–µ–ª–µ–π
    goals_keyboard = [
        [KeyboardButton('–ü–æ—Ö—É–¥–µ–Ω–∏–µ'), KeyboardButton('–ù–∞–±–æ—Ä –º–∞—Å—Å—ã')],
        [KeyboardButton('–†–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏—è'), KeyboardButton('–£–ª—É—á—à–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã')]
    ]
    reply_markup = ReplyKeyboardMarkup(goals_keyboard, one_time_keyboard=True, resize_keyboard=True)
    
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –≤–∞—à–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:', reply_markup=reply_markup)
    return ASK_GOAL

# –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª—å
async def ask_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['goal'] = update.message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
    write_to_google_sheet(
        context.user_data['full_name'],
        context.user_data['age'],
        context.user_data['goal']
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    summary = (
        f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!\n\n"
        f"–§–ò–û: {context.user_data['full_name']}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {context.user_data['age']}\n"
        f"–¶–µ–ª—å: {context.user_data['goal']}\n\n"
        f"–°–∫–æ—Ä–æ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏!"
    )
    await update.message.reply_text(summary)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    admin_message = (
        f"üì¨ –ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!\n\n"
        f"–§–ò–û: {context.user_data['full_name']}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {context.user_data['age']}\n"
        f"–¶–µ–ª—å: {context.user_data['goal']}"
    )
    await context.bot.send_message(chat_id=433684845, text=admin_message)

    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
    return ConversationHandler.END

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
def main():
    token = os.getenv('BOT_TOKEN')
    app = ApplicationBuilder().token(token).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^(–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å)$'), booking)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_name)],
            ASK_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_age)],
            ASK_GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_goal)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    app.add_handler(CommandHandler('start', start))
    app.add_handler(conv_handler)

    app.run_polling()

if __name__ == '__main__':
    main()
